{"version":3,"sources":["node_modules/node-fetch/browser.js","lib/BBLogger.js","index.js"],"names":["getGlobal","self","window","global","Error","module","exports","fetch","default","bind","Headers","Request","Response","BBLogger","apiEndpoint","severity","location","userAgent","message","err","eventDate","Date","event","logs","JSON","stringify","stack","name","settings","method","headers","body","res","json","logResponse","console","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,cAEA;;AACA,IAAIA,SAAS,GAAG,YAAY;AAC3B;AACA;AACA;AACA,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAAE,WAAOA,IAAP;AAAc;;AACjD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,QAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACA,CARD;;AAUA,IAAID,MAAM,GAAGH,SAAS,EAAtB;AAEAK,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGH,MAAM,CAACI,KAAlC,EAEA;;AACA,IAAIJ,MAAM,CAACI,KAAX,EAAkB;AACjBD,EAAAA,OAAO,CAACE,OAAR,GAAkBL,MAAM,CAACI,KAAP,CAAaE,IAAb,CAAkBN,MAAlB,CAAlB;AACA;;AAEDG,OAAO,CAACI,OAAR,GAAkBP,MAAM,CAACO,OAAzB;AACAJ,OAAO,CAACK,OAAR,GAAkBR,MAAM,CAACQ,OAAzB;AACAL,OAAO,CAACM,QAAR,GAAmBT,MAAM,CAACS,QAA1B;;;;;;;;;ACxBA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,QAAQ;AAAA,qEAAG,iBAAOC,WAAP,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,SAAxC,EAAmDC,OAAnD,EAA4DC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,SADS,GACG,IAAIC,IAAJ,EADH;AAETC,YAAAA,KAFS,GAED;AACZC,cAAAA,IAAI,EAAE,oBACQR,QADR,wBAC8BC,QAD9B,0BACsDI,SADtD,qBAC0EH,SAD1E,2BACoGO,IAAI,CAACC,SAAL,CACtGN,GAAG,CAACO,KADkG,CADpG,0BAGaF,IAAI,CAACC,SAAL,CAAeN,GAAG,CAACQ,IAAnB,CAHb,6BAGwDH,IAAI,CAACC,SAAL,CAC1DN,GAAG,CAACD,OADsD,CAHxD,uBAKUM,IAAI,CAACC,SAAL,CAAeP,OAAf,CALV;AADM,aAFC;AAWTU,YAAAA,QAXS,GAWE;AACfC,cAAAA,MAAM,EAAE,MADO;AAEfC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFM;AAKfC,cAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAeH,KAAf;AALS,aAXF;AAAA;AAAA;AAAA,mBAmBK,wBAAMR,WAAN,EAAmBc,QAAnB,CAnBL;;AAAA;AAmBPI,YAAAA,GAnBO;AAAA;AAAA,mBAoBaA,GAAG,CAACC,IAAJ,EApBb;;AAAA;AAoBPC,YAAAA,WApBO;AAAA,6CAqBNA,WArBM;;AAAA;AAAA;AAAA;AAuBbC,YAAAA,OAAO,CAACC,KAAR;;AAvBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARvB,QAAQ;AAAA;AAAA;AAAA,GAAd;;eA2BeA;;;;;;;;;;;;;;;ACvCf","file":"index.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","import fetch from 'node-fetch'\r\n/**\r\n * Send an event.\r\n *\r\n * @param  {string | null} apiEndpoint The full api endpoint e.g. https://myloggingplatform.com/function\r\n * @param  {string | null} severity The severity of the event e.g. EMERGENCY, ALERT, CRITICAL, ERROR, WARNING, DEBUG, INFO, NOTICE, DEFAULT\r\n * @param  {string | null} location The location of the event e.g. URL, class, etc\r\n * @param  {string | null} userAgent User agent details e.g. navigator.userAgent\r\n * @param  {string | null} message A custom message to send with event e.g. 'Lorem ipsum'\r\n * @param  {function | null} err Expects Error() to be passed in from where the error occured\r\n * @return {json}\r\n */\r\nconst BBLogger = async (apiEndpoint, severity, location, userAgent, message, err) => {\r\n  const eventDate = new Date()\r\n  const event = {\r\n    logs: [\r\n      `severity=${severity}, location=${location}, agent_date=${eventDate}, agent=${userAgent}, error_stack=${JSON.stringify(\r\n        err.stack\r\n      )}, error_name=${JSON.stringify(err.name)}, error_message=${JSON.stringify(\r\n        err.message\r\n      )}, message=${JSON.stringify(message)}`,\r\n    ],\r\n  }\r\n  const settings = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n    body: JSON.stringify(event),\r\n  }\r\n  try {\r\n    const res = await fetch(apiEndpoint, settings)\r\n    const logResponse = await res.json()\r\n    return logResponse\r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n}\r\n\r\nexport default BBLogger\r\n","import BBLogger from './lib/BBLogger'\r\n\r\nexport { BBLogger }\r\n"]}