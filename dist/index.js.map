{"version":3,"sources":["lib/BBLogger/index.js","index.js"],"names":["BBLogger","apiEndpoint","severity","location","userAgent","message","err","eventDate","Date","event","logs","JSON","stringify","stack","name","settings","method","headers","body","fetch","res","json","logResponse","console","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eACeA,QAAQ;AAAA,qEAAG,iBAAOC,WAAP,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,SAAxC,EAAmDC,OAAnD,EAA4DC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,SADkB,GACN,IAAIC,IAAJ,EADM;AAElBC,YAAAA,KAFkB,GAEV;AACZC,cAAAA,IAAI,EAAE,oBACQR,QADR,wBAC8BC,QAD9B,0BACsDI,SADtD,qBAC0EH,SAD1E,2BACoGO,IAAI,CAACC,SAAL,CACtGN,GAAG,CAACO,KADkG,CADpG,0BAGaF,IAAI,CAACC,SAAL,CAAeN,GAAG,CAACQ,IAAnB,CAHb,6BAGwDH,IAAI,CAACC,SAAL,CAC1DN,GAAG,CAACD,OADsD,CAHxD,uBAKUM,IAAI,CAACC,SAAL,CAAeP,OAAf,CALV;AADM,aAFU;AAWlBU,YAAAA,QAXkB,GAWP;AACfC,cAAAA,MAAM,EAAE,MADO;AAEfC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFM;AAKfC,cAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAeH,KAAf;AALS,aAXO;AAAA;AAAA;AAAA,mBAmBJU,KAAK,CAAClB,WAAD,EAAcc,QAAd,CAnBD;;AAAA;AAmBhBK,YAAAA,GAnBgB;AAAA;AAAA,mBAoBIA,GAAG,CAACC,IAAJ,EApBJ;;AAAA;AAoBhBC,YAAAA,WApBgB;AAAA,6CAqBfA,WArBe;;AAAA;AAAA;AAAA;AAuBtBC,YAAAA,OAAO,CAACC,KAAR;;AAvBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACXvB","file":"index.js","sourceRoot":"..","sourcesContent":["/**\r\n * Send an event.\r\n *\r\n * @param  {string | null} apiEndpoint The full api endpoint e.g. https://myloggingplatform.com/function\r\n * @param  {string | null} severity The severity of the event e.g. EMERGENCY, ALERT, CRITICAL, ERROR, WARNING, DEBUG, INFO, NOTICE, DEFAULT\r\n * @param  {string | null} location The location of the event e.g. URL, class, etc\r\n * @param  {string | null} userAgent User agent details e.g. navigator.userAgent\r\n * @param  {string | null} message A custom message to send with event e.g. 'Lorem ipsum'\r\n * @param  {function | null} err Expects Error() to be passed in from where the error occured\r\n * @return {json}\r\n */\r\nexport default BBLogger = async (apiEndpoint, severity, location, userAgent, message, err) => {\r\n  const eventDate = new Date()\r\n  const event = {\r\n    logs: [\r\n      `severity=${severity}, location=${location}, agent_date=${eventDate}, agent=${userAgent}, error_stack=${JSON.stringify(\r\n        err.stack\r\n      )}, error_name=${JSON.stringify(err.name)}, error_message=${JSON.stringify(\r\n        err.message\r\n      )}, message=${JSON.stringify(message)}`,\r\n    ],\r\n  }\r\n  const settings = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n    body: JSON.stringify(event),\r\n  }\r\n  try {\r\n    const res = await fetch(apiEndpoint, settings)\r\n    const logResponse = await res.json()\r\n    return logResponse\r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n}\r\n","import BBLogger from './lib/BBLogger'\r\n\r\nexport { BBLogger }\r\n"]}